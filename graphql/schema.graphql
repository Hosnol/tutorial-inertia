"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @all

    posts: [Post!]! @paginate
    post(id: Int! @eq): Post @find

    comment(id: Int! @eq): Comment @find

}

type Mutation {
    createUser(
      "Create a new user."
      name: String!
      email: String! @rules(apply: ["required", "email"])
      password: String! @hash @rules (apply: ["min:8"])
    ): User @create

    updateUser(
      "Update an existing user."
      id: ID!
      name: String
      email: String @rules(apply: ["required", "email"])
      password: String @hash @rules (apply: ["min:8"])
    ): User @update

    deleteUser(
      "Delete an existing user."
      id: ID!
    ): User @delete
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    posts: [Post!]! @hasMany
}

type Post {
    "Unique primary key."
    id: ID!

    "Title of the post."
    title: String!

    "content of the post."
    content: String!

    "Author of the post."
    author: User! @belongsTo

    "Comments on the post."
    comments: [Comment!]! @hasMany
}

type Comment {
    "Unique primary key."
    id: ID!

    "Content of the comment."
    reply: String!

    "Author of the comment."
    post: Post! @belongsTo
}

